generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]  @relation("UserEvents") // Many-to-many relation
  TicketVerification TicketVerification[]
}

model Client {
  id     String  @id @default(uuid())
  name   String
  email     String   @unique
  events Event[]
}

model Event {
  id                  String                 @id @default(uuid())
  title               String
  date                DateTime
  pricePaidInCents    Int
  clientId            String
  client              Client                 @relation(fields: [clientId], references: [id], onDelete: Cascade)

  users               User[]                 @relation("UserEvents") // Many-to-many relation

  isAvailableForPurchase  Boolean            @default(true)
  NumberOfTickets     Int
  imagePath           String? 
  description         String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  TicketVerifications TicketVerification[]
}

model TicketVerification {
  id        String   @id @default(uuid())
  ticketId  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
